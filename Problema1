from pyomo.environ import *
from pyomo.opt import SolverFactory
import matplotlib.pyplot as plt
import pandas as pd

# Conjuntos
R = ["Alimentos Basicos", "Medicinas", "Equipos Medicos", "Agua Potable", "Mantas"]
A = [1, 2, 3, 4]
Z = ["A", "B", "C", "D"]
V = [1, 2]

# Par치metros
valor_impacto = {
    "Alimentos Basicos": 50,
    "Medicinas": 100,
    "Equipos Medicos": 120,
    "Agua Potable": 60,
    "Mantas": 40,
}
peso = {
    "Alimentos Basicos": 5,
    "Medicinas": 2,
    "Equipos Medicos": 0.3,
    "Agua Potable": 6,
    "Mantas": 3,
}
volumen = {
    "Alimentos Basicos": 3,
    "Medicinas": 1,
    "Equipos Medicos": 0.5,
    "Agua Potable": 4,
    "Mantas": 2,
}
disponibilidad = {
    "Alimentos Basicos": 12,
    "Medicinas": 15,
    "Equipos Medicos": 40,
    "Agua Potable": 15,
    "Mantas": 20,
}

capacidad_peso = {1: 40, 2: 50, 3: 60, 4: 45}
capacidad_volumen = {1: 35, 2: 40, 3: 45, 4: 38}
costo_fijo = {1: 15, 2: 20, 3: 25, 4: 18}
costo_variable = {1: 0.02, 2: 0.025, 3: 0.03, 4: 0.022}

distancia = {"A": 800, "B": 1200, "C": 1500, "D": 900}
poblacion = {"A": 50, "B": 70, "C": 100, "D": 80}
multiplicador = {"A": 1.2, "B": 1.5, "C": 1.8, "D": 1.4}

necesidades = {
    "A": {
        "Alimentos Basicos": 8,
        "Agua Potable": 6,
        "Medicinas": 2,
        "Equipos Medicos": 0.6,
        "Mantas": 3,
    },
    "B": {
        "Alimentos Basicos": 12,
        "Agua Potable": 9,
        "Medicinas": 3,
        "Equipos Medicos": 0.9,
        "Mantas": 5,
    },
    "C": {
        "Alimentos Basicos": 16,
        "Agua Potable": 12,
        "Medicinas": 4,
        "Equipos Medicos": 1.2,
        "Mantas": 7,
    },
    "D": {
        "Alimentos Basicos": 10,
        "Agua Potable": 8,
        "Medicinas": 2,
        "Equipos Medicos": 0.6,
        "Mantas": 4,
    },
}

# Modelo
Model = ConcreteModel()

# Variables de decisi칩n
Model.x = Var(A, R, Z, V, domain=NonNegativeIntegers)
Model.usa_avion = Var(A, domain=Binary)
Model.asignacion_zona = Var(A, V, Z, domain=Binary)

# Funci칩n objetivo
Model.obj = Objective(
    expr=sum(
        valor_impacto[j] * multiplicador[k] * Model.x[i, j, k, m]
        for i in A
        for j in R
        for k in Z
        for m in V
    ),
    sense=maximize,
)

#### Restricciones ####

# Medicina no se transporta en el avion 1
Model.res1 = ConstraintList()
for m in V:
    for k in Z:
        Model.res1.add(expr=Model.x[1, "Medicinas", k, m] == 0)

# Equipos medicos y agua no pueden viajar en el mismo avion
Model.res2 = ConstraintList()
for i in A:
    for k in Z:
        for m in V:
            Model.res2.add(
                expr=Model.x[i, "Equipos Medicos", k, m]
                * Model.x[i, "Agua Potable", k, m]
                == 0
            )

"""
# Cada avion va a unica zona de destino por viaje
Model.res4 = ConstraintList()
for i in A:
    for m in V:
        for k1 in Z:
            for k2 in Z:
                if k1 != k2:
                    Model.res4.add(
                        expr=(
                            sum(Model.x[i, j, k1, m] for j in R)
                            * sum(Model.x[i, j, k2, m] for j in R)
                            == 0
                        )
                    )
"""
Model.res4 = ConstraintList()
for i in A:
    for m in V:
        Model.res4.add(
            expr=sum(Model.asignacion_zona[i, m, k] for k in Z) <= 1
        )

# Avion no excede su capacidad en peso
Model.res5 = ConstraintList()
for i in A:
    for k in Z:
        for m in V:
            Model.res5.add(
                expr=sum(Model.x[i, j, k, m] * peso[j] for j in R) <= capacidad_peso[i]
            )

# Avion no excede su capacidad en volumen
Model.res6 = ConstraintList()
for i in A:
    for k in Z:
        for m in V:
            Model.res6.add(
                expr=sum(Model.x[i, j, k, m] * volumen[j] for j in R)
                <= capacidad_volumen[i]
            )

# Aviones no exceden disponibilidad
Model.res7 = ConstraintList()
for j in R:
    Model.res7.add(
        expr=sum(Model.x[i, j, k, m] for i in A for k in Z for m in V)
        <= disponibilidad[j]
    )

# ------------------------- Las 8 y 4 entran en conflicto


# Necesidades por region se cumplen
Model.res8 = ConstraintList()
for j in R:
    for k in Z:
        Model.res8.add(
            expr=necesidades[k][j] <= sum(Model.x[i, j, k, m] * peso[j] for i in A for m in V)
        )

# Funcion de minimizacion de costo

Model.res9 = ConstraintList()
Model.res9.add(
    expr=sum(costo_fijo[i] * Model.usa_avion[i] for i in A)
    + sum(
        costo_variable[i] * distancia[k] * Model.asignacion_zona[i, m, k]
        for i in A
        for k in Z
        for m in V
    )
    <= 5000
)
# Configuracion Variable Usa Avion
Model.res10 = ConstraintList()
for i in A:
    Model.res10.add(
        expr=sum(Model.x[i, j, k, m] for j in R for k in Z for m in V)
        - 1e9 * Model.usa_avion[i]
        <= 0
    )

# Configuracion Variable Asignacion Zona
Model.res11 = ConstraintList()
for i in A:
    for m in V:
        for k in Z:
            Model.res11.add(
                expr=sum(Model.x[i, j, k, m] for j in R)
                - 1e9 * Model.asignacion_zona[i, m, k]
                <= 0
            )

# Especificaci칩n del solver
# solver = SolverFactory(
#     'bonmin',
#     executable=r"C:\Users\maria\OneDrive\Escritorio\SextoSemestre\MOS\ampl.mswin64\bonmin.exe"
# ).solve(Model, tee=True)

solver = SolverFactory('ipopt')
solver.solve(Model, tee=True)


# Imprimir resultados
for i in A:
    for j in R:
        for k in Z:
            for m in V:
                if value(Model.x[i, j, k, m]) >= 0.01:
                    valor = round(value(Model.x[i, j, k, m]), 1)
                    print(valor)

print(f"Prioridad total: {value(Model.obj)}")